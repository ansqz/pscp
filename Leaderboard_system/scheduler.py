# Leaderboard_system/scheduler.py
import os
import asyncio
from typing import List, Tuple

import discord
from dotenv import load_dotenv

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger
from apscheduler.triggers.cron import CronTrigger

# ‡πÇ‡∏°‡∏î‡∏π‡∏•‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå
from ques_choices.question_manager import get_question
from score_manager.score_manager import add_score
from Leaderboard_system.leaderboard import show_leaderboard, reset_scores

# ‡πÇ‡∏´‡∏•‡∏î .env (‡πÄ‡∏ú‡∏∑‡πà‡∏≠ main ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÇ‡∏´‡∏•‡∏î)
load_dotenv()
CHANNEL_ID = int(os.getenv("CHANNEL_ID", "0"))

# ---------- ‡πÅ‡∏Å‡∏ô‡πÄ‡∏•‡πà‡∏ô 1 ‡∏£‡∏≠‡∏ö (5 ‡∏Ñ‡∏≥) ----------
async def _play_round(bot: discord.Client) -> None:
    """
    ‡πÄ‡∏•‡πà‡∏ô 1 ‡∏£‡∏≠‡∏ö (5 ‡∏Ñ‡∏≥)
    - ‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏•‡∏∞ 1 ‡∏Ç‡πâ‡∏≠: ‡∏Ñ‡∏≥‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© + ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 4 ‡∏ï‡∏±‡∏ß
    - ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡∏Ç 1-4)
    - ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ï‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å: 5,4,3 ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÑ‡∏î‡πâ 1
    - ‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠
    - ‡∏à‡∏ö‡∏Ñ‡∏£‡∏ö 5 ‡∏Ç‡πâ‡∏≠ ‡πÇ‡∏û‡∏™‡∏ï‡πå Leaderboard ‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ
    """
    ch = bot.get_channel(CHANNEL_ID)
    if ch is None or not isinstance(ch, discord.TextChannel):
        return  # ‡∏ä‡πà‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡πá‡∏à‡∏ö‡πÄ‡∏á‡∏µ‡∏¢‡∏ö ‡πÜ

    for i in range(5):  # ‡∏£‡∏≠‡∏ö‡∏•‡∏∞ 5 ‡∏Ç‡πâ‡∏≠
        # ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì: ‡πÑ‡∏î‡πâ (word, answer, choices[4])
        word, answer, choices = get_question()
        # ‡∏´‡∏≤ index ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å (1-4)
        try:
            correct_index = choices.index(answer) + 1
        except ValueError:
            # ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏¥‡∏î‡∏£‡∏π‡∏õ (answer ‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô choices) ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠
            await ch.send("‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ‡∏Ç‡πâ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏ô‡∏µ‡πâ")
            await asyncio.sleep(1)
            continue

        header = f"**‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà {i+1}/5**  What is '{word}' in Thai?"
        body = "\n".join(f"{n}. {txt}" for n, txt in enumerate(choices, start=1))
        await ch.send(f"{header}\n{body}\n‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö (1-4) ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô **5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ** !")

        # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö (user_id, ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)
        answers: List[Tuple[int, int]] = []

        def check(msg: discord.Message) -> bool:
            return (
                msg.channel.id == ch.id
                and msg.content.isdigit()
                and 1 <= int(msg.content) <= 4
            )

        try:
            while True:
                msg = await bot.wait_for("message", check=check, timeout=5)
                answers.append((msg.author.id, int(msg.content)))
        except asyncio.TimeoutError:
            pass  # ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤

        # ‡∏ô‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏ï‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å
        seen = set()
        correct_order: List[int] = []
        for uid, choice in answers:
            if uid in seen:
                continue
            seen.add(uid)
            if choice == correct_index:
                correct_order.append(uid)

        # ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: 5,4,3, ‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÑ‡∏î‡πâ 1
        if correct_order:
            plan = [5, 4, 3]
            if len(correct_order) > 3:
                plan += [1] * (len(correct_order) - 3)
            for uid, pts in zip(correct_order, plan):
                add_score(uid, pts)

        await ch.send(f"‚úÖ ‡πÄ‡∏â‡∏•‡∏¢: **{answer}**")
        await asyncio.sleep(2)  # ‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏ñ‡∏±‡∏î‡πÑ‡∏õ

    # ‡∏à‡∏ö‡∏£‡∏≠‡∏ö ‚Üí ‡πÇ‡∏ä‡∏ß‡πå Leaderboard ‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ (Top 10)
    await show_leaderboard(ch, top_n=10)

# ---------- ‡πÇ‡∏û‡∏™‡∏ï‡πå Top10 ‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå ----------
async def _post_weekly(bot: discord.Client) -> None:
    ch = bot.get_channel(CHANNEL_ID)
    if ch and isinstance(ch, discord.TextChannel):
        await ch.send("üóìÔ∏è **Top 10 ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå**")
        await show_leaderboard(ch, top_n=10)

# ---------- ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ----------
async def _post_monthly_reset(bot: discord.Client) -> None:
    ch = bot.get_channel(CHANNEL_ID)
    if ch and isinstance(ch, discord.TextChannel):
        await reset_scores(ch)

# ---------- ‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏° Scheduler ----------
def schedule_tasks(
    bot: discord.Client,
    timezone_str: str = "Asia/Bangkok",
    debug: bool = False,
) -> AsyncIOScheduler:
    """
    ‡∏ï‡∏±‡πâ‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥:
      - ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡∏ó‡∏∏‡∏Å 20 ‡∏ô‡∏≤‡∏ó‡∏µ (‡∏ñ‡πâ‡∏≤ debug=True ‡∏à‡∏∞‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ó‡∏∏‡∏Å 1 ‡∏ô‡∏≤‡∏ó‡∏µ)
      - ‡πÇ‡∏û‡∏™‡∏ï‡πå Top10 ‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå 12:00
      - ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 1 ‡πÄ‡∏ß‡∏•‡∏≤ 00:05
    """
    interval_min = 1 if debug else 20

    sch = AsyncIOScheduler(timezone=timezone_str)
    # ‡∏Å‡∏±‡∏ô‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡∏ö‡∏Å‡∏±‡∏ô: max_instances=1 ‡πÅ‡∏•‡∏∞ coalesce=True
    sch.add_job(
        lambda: asyncio.create_task(_play_round(bot)),
        IntervalTrigger(minutes=interval_min),
        id="round_every_interval",
        replace_existing=True,
        max_instances=1,
        coalesce=True,
    )
    sch.add_job(
        lambda: asyncio.create_task(_post_weekly(bot)),
        CronTrigger(day_of_week="sun", hour=12, minute=0),
        id="weekly_top10",
        replace_existing=True,
        max_instances=1,
        coalesce=True,
    )
    sch.add_job(
        lambda: asyncio.create_task(_post_monthly_reset(bot)),
        CronTrigger(day="1", hour=0, minute=5),
        id="monthly_reset",
        replace_existing=True,
        max_instances=1,
        coalesce=True,
    )
    sch.start()
    return sch
